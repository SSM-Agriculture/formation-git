---
editor: 
  markdown: 
    wrap: 72
---

# Les zones de Git {.backgroundTitre}

## Fonctionnement

![](img/completeworkflow.png){fig-align="center"}

\*Source :
[itnext.io](https://itnext.io/git-concepts-for-newcomers-part-2-git-repository-working-tree-and-staging-area-a2e720bf3528)

## Les zones de Git :

Pour évoquer le fonctionnement de Git et son articulation avec une
forge, cela nécessite d'apprendre à utiliser de nouveaux termes (voir
lexique diapo suivante).

-   `working directory` : répertoire de travail de l'agent
-   `staging area` ou `index` : zone tampon dans laquelle l'agent
    regroupe les changements en vue du prochain commit.
-   `local repository` : dépôt local présent dans votre espace de
    travail (.git)
-   `remote repository` : dépôt distant sur une forge

## Les commandes principales de Git

-   `git add` : ajout des changements à l'index\
-   `git commit` : enregistre les changements placés dans l'index\
-   `git push` : envoie les changements vers le dépôt distant\
-   `git pull` : télécharge les changements depuis le dépôt distant\
-   `git checkout` : permet de se déplacer dans l'arbre (retour vers le
    passé, changement de branche)

## Une 2ème illustration pour fixer les idées :)

::: columns
::: {.column width="70%"}
![](img/git-workflow-allisonhorst.png){fig-align="center"}
:::

::: {.column width="30%"}
*Source :* [Allison Horst](https://allisonhorst.com/git-github)
:::
:::

## Le working directory

Il s'agit de notre **copie de travail** c'est-à-dire le répertoire et
sous-répertoires dans lesquels se trouvent les fichiers suivis par Git.

C'est là que l'agent effectue les changements sur les fichiers.\
Il correspond à votre **espace de travail**.

::: callout-important
## Avis aux utilisateurs novices

Faire très attention au début de l'utilisation de Git : en fonction de
la commande Git que vous allez utiliser (par exemple un `git checkout`
pour changer de branche ou revenir dans le passé), **Git va changer le
contenu de cet espace sans vous avertir**.
:::

## La staging area ou l'index

**Zone tampon** dans laquelle l'agent regroupe les changements en vue du
prochain commit.

L'agent peut **ajouter** ou **retirer** les changements à l'index.

Il peut faire cela en une seule ou plusieurs opérations (voir diapos
suivantes).

::: callout-warning
## Attention

Ajouter des changements à plusieurs fichiers en même temps nécessite
d'être sûr de ce que l'on fait et d'avoir correctement configuré le
fichier `.gitignore` (voir diapositive suivante).
:::

## Ajouter des changements à l'index

Pour ajouter des changements :

![](img/icone_rstudio.png){.inlineimage} **Avec RStudio**

-   Un seul fichier : **en cochant un fichier dans l'onglet Git**\
    ![](img/git_add_un_fichier.png)

-   Plusieurs fichiers : **en cochant plusieurs fichiers dans l'onglet
    Git**\
    ![](img/git_add_plusieurs_fichiers.png)

![](img/icone_terminal.png){.inlineimage} **En ligne de commande :**

-   Un seul fichier : `git add <file-name>`
-   Tous les fichiers : `git add .`

## Retirer des changements à l'index

Pour retirer des changements :

![](img/icone_rstudio.png){.inlineimage} **Avec RStudio**\
En décochant les fichiers dans l'onglet Git

![](img/icone_terminal.png){.inlineimage} **En ligne de commande :**

-   Un seul fichier : `git reset <file-name>`
-   Tous les fichiers : `git reset`

## Les états des fichiers avec RStudio ![](img/icone_rstudio.png)

[L'onglet de RStudio permet d'avoir des repères visuels sur les
changements apportés à chacun de vos fichiers :]{.red}

<br> <br>

::: columns
::: {.column width="30%"}
![](img/etats_fichiers.png){fig-align="center"}
:::

::: {.column width="70%"}
-   `Deleted` : le fichier a été supprimé du working directory\
-   `Modified` : le contenu du fichier a été modifié\
-   `Untracked` : le fichier a été ajouté au working directory et Git ne
    l'a jamais vu auparavant
:::
:::

## Les états des fichiers avec le terminal ![](img/icone_terminal.png)

[La commande `git status` affiche l'état du working directory et de
l'index.]{.red}\
<br>

Voici un exemple d'équivalence entre les icônes RStudio et le résultat
renvoyé par la commande `git status` :

<br>

::: columns
::: {.column width="50%"}
![](img/icone_rstudio.png){fig-align="center"}

![](img/equivalence_rstudio.png){fig-align="center"}
:::

::: {.column width="50%"}
![](img/icone_terminal.png){fig-align="center"}

![](img/equivalence_terminal.png){fig-align="center"}
:::
:::

## Les états des fichiers APRÈS l'ajout à l'index

Après l'ajout de fichier à l'index, 2 nouvelles icônes apparaissent dans
RStudio (**même fonctionnement avec le terminal**) :

::: columns
::: {.column width="30%"}
![](img/etats_fichiers_apres.png){fig-align="center"}
:::

::: {.column width="70%"}
-   `Added` : Git comprend que vous voulez ajouter le fichier au dépôt\
-   `Renamed` : Git comprend que le fichier a été renommé
:::
:::

| Changement           | AVANT l’ajout à l’index             | APRÈS l’ajout à l’index             |
|----------------------|-------------------------------------|-------------------------------------|
| Ajout de fichier     | ![](img/ajouter_avant_staging.png)  | ![](img/ajouter_apres_staging.png)  |
| Renommage de fichier | ![](img/renommer_avant_staging.png) | ![](img/renommer_apres_staging.png) |

## Comment Git stocke les différentes versions d'un fichier ?

![](img/Git_stockage_versions.png){fig-align="center"}

*"À chaque fois que vous validez ou enregistrez l'état du projet dans
Git, il prend un"snapshot" du contenu de votre working directory à ce
moment et enregistre une référence à ce snapshot. Pour être efficace, si
les fichiers n'ont pas changé, Git ne stocke pas le fichier à nouveau,
juste une référence vers le fichier original qu'il a déjà enregistré."*

## Afficher les différences avec RStudio ![](img/icone_rstudio.png)

L'interface de RStudio permet de rapidement et facilement visualiser les
changements que vous avez apportés sur le code.

Pour cela cliquez sur le bouton `diff` de l'onglet Git
![](img/bouton_diff.png){.inlineimage}.

::: columns
::: {.column width="40%"}
<br> <br> <br> <br>

-   [Le code supprimé s'affiche en rouge]{.red}\
-   [Le code ajouté s'affiche en vert]{.green}
:::

::: {.column width="60%"}
![](img/git_diff_rstudio.png)
:::
:::

## Afficher les différences avec le terminal ![](img/icone_terminal.png)

La commande `git diff` affiche les différences.

![](img/git_diff_terminal.png)

Pour afficher les différences sur les fichiers déjà ajoutés à l'index,
la commande est `git diff --staged`.

[Le terminal permet d'aller plus loin dans l'observation des
différences, par exemple en comparant 2 commits...]{.full-width
.content-box-yellow}

## Revenir en arrière avec RStudio ![](img/icone_rstudio.png)

Dans RStudio cliquez sur le bouton `Plus` de l'onglet Git puis choisir
le bouton `Inverser` :

![](img/git_revert_rstudio.png)

Un message de confirmation vous demande si vous êtes sûr de votre action
:

![](img/git_revert_confirmation_rstudio.png){fig-align="center"}

## Revenir en arrière avec le terminal ![](img/icone_terminal.png)

[La commande git restore permet de restaurer des fichiers]{.red}

+------------------------------------------+---------------------------+
| Action                                   | Commande                  |
+==========================================+===========================+
| Inverser les changements pas encore      | `git restore <file-name>` |
| ajoutés à l'index                        |                           |
+------------------------------------------+---------------------------+
| Inverser les changements déjà ajoutés à  | `git rest                 |
| l'index                                  | ore --staged <file-name>` |
+------------------------------------------+---------------------------+

## Le commit

<p style="text-align: center;">[Action de figer l'état du dépôt sous forme de `snapshot`]{.content-box-green}</p>

**Un bon commit :**

-   Change une seule chose
-   Peut être décrit avec un message clair et explicite

**Erreur courante du débutant sur Git :**

-   Il code pendant des heures/jours/semaines\
-   Ajoute toutes les modifications à l'index avec `git add .`\
-   Puis il commite...

## Caractéristiques du commit

-   Un commit possède **un identifiant unique** (SHA)

Il informe les utilisateurs :

-   Qui ? Quoi ? Où ? Quand ? =\> Avec ses **métadonnées**
-   Quoi ? Où ? Comment ? =\> Avec l'affichage des **différences**
-   Pourquoi ? =\> Avec **le message du commit**

## Les messages de commit

D'après [Conventional
Commits](https://www.conventionalcommits.org/en/v1.0.0/), l'écriture des
messages de commits devrait suivre la la structure minimale suivante :

```         
<type>: <description>
```

Le tableau suivant reprend les types les plus couramment utilisés :

| Type Detail | Detail                             |
|-------------|------------------------------------|
| wip         | Développement d'une fonctionnalité |
| feat        | Ajout d'une fonctionnalité         |
| fix         | Correction d'un bug/erreur         |
| doc         | Documentation                      |
| deprecated  | Fonctionnalité dépréciée           |
| chore       | Tâches de routine/automatisées     |

## Comment commiter avec RStudio ? ![](img/icone_rstudio.png)

Après avoir ajouté les fichiers modifiés à l'index, il est temps de "commiter" 
les changements c'est-à-dire de prendre une photo / un snapshot de ces fichiers modifiés.  

Dans RStudio, il faut cliquer sur le bouton "Commit" de l'onglet "Git"   


![](img/git_commit_rstudio.png){fig-align="center"}  


Puis, renseigner dans la nouvelle fenêtre qui s'affiche le message du commit et 
cliquer sur le bouton "Commit" :  

![](img/git_commit_message_rstudio.png){fig-align="center"}


## Comment commiter avec le terminal ? ![](img/icone_terminal.png)

<br>
<p style="text-align: center;">**La commande `git commit -m "message du commit"` permet à la fois de faire le commit 
tout en renseignant le message associé**</p>

<br>

*Voici un exemple :*  

`git commit -m "fix: ajout fichier odt dans .gitignore"`

<br>
::: callout-note
La commande `git commit` propose de nombreuses options qui sont disponibles [ici](https://git-scm.com/docs/git-commit/fr).
:::

## Modifier le dernier commit

**Il y a au moins deux raisons de revenir sur un commit :**

-   Modifier le message de commit (même pour une faute de frappe)\
-   Ajouter ou supprimer des fichiers au commit.

::: columns
::: {.column width="50%"}
![](img/icone_rstudio.png){fig-align="center"}

Cocher la case `Amend previous commit` en dessous du message de commit
précédent.

![](img/git_commit_amend_rstudio.png){fig-align="center"}
:::

::: {.column width="50%"}
![](img/icone_terminal.png){fig-align="center"}

La commande à utiliser est :\
`git commit --amend -m 'Mon nouveau message de commit'`
:::
:::

[Attention ! Cette commande ne doit être effectuée que si vous n'avez
pas encore poussé le commit sur dépôt distant sinon les autres
utilisateurs du commit seront affectés puisque le SHA-1 est
changé]{.full-width .content-box-red}

## Si vous ne deviez retenir que quelques commandes ! ![](img/a_retenir.png)

+------------------------+----------------------------+----------------------------+
| Action                 |![](img/icone_rstudio.png)  |![](img/icone_terminal.png) |
+:======================:+:==========================:+:==========================:+
| Vous ajoutez vos       | Cochez les fichiers        | `git add`                  |
| fichiers à l'index     |                            |                            |
+------------------------+----------------------------+----------------------------+
| Vous committez vos     | Appuyez sur le bouton      | `git commit -              |
| changements            | "Commit" et vous           | m "Votre message"`         |
|                        | renseignez votre           |                            |
|                        | message de commit          |                            |
+------------------------+----------------------------+----------------------------+
| Vous envoyez vos       | Appuyez sur le bouton      | `git push origin           |
| commits en local sur   | "Push"                     |  <nom-de-branche>`         |
| le serveur distant     |                            |                            |
+------------------------+----------------------------+----------------------------+
| **Supplément si vous   |                            |                            |
| travaillez à plusieurs |                            |                            |
| :**                    |                            |                            |
+------------------------+----------------------------+----------------------------+
| Récupérer les          | Appuyez sur le bouton      | `git pull origin           |
| éventuels commits de   | "Pull"                     |  <nom-de-branche>`         |
| vos collègues          |                            |                            |
+------------------------+----------------------------+----------------------------+

## Consulter l'historique avec RStudio (1/2) ![](img/icone_rstudio.png)

::: columns
::: {.column width="48%"}

En cliquant sur le bouton
`Historique` de RStudio :  
![](img/history_rstudio.png)  

Ce qui permet d'accéder à la fenêtre suivante : 

:::

::: {.column width="52%"}

![](img/history_fenetre_rstudio.png)

:::

::::


## Consulter l'historique avec RStudio (2/2) ![](img/icone_rstudio.png)

RStudio permet facilement de :  

- Balayer l'historique du projet en sélectionnant les différents commits.  

- Accèder aux informations correspondants à chaque commit.  

- Cliquer sur les fichiers concernés par chaque commit et afficher leur état au moment choisi.


## Consulter l'historique avec le terminal

![](img/icone_terminal.png){.inlineimage} Avec la commande `git log` :
Exemple :

```         
C:\Users\damien.dotta\DEMESIS\Formations_Git\formation_git_2024>git log
commit efb2b38f3f4c7719201119c5bf1dea575e0621ab (HEAD -> main, origin/main)
Author: Damien Dotta <damien.dotta@live.fr>
Date:   Fri Mar 29 17:13:00 2024 +0100

    doc: ajout de ce qu'on versionne et ceux qu'on ne versionne pas
```

Ce qu'on y trouve :

-   l'identifiant du commit\
-   l'auteur du commit (nom + email)\
-   la date et l'heure du commit\
-   le message du commit

::: callout-note
La commande `git log --oneline` affiche les informations concernant
l'historique de façon plus compacte mais moins riche.
:::

## Fréquence des commits

**Quelle fréquence pour les commit ?**  

- Aussi souvent que possible  

- Regrouper les modifications en lots qui "font sens", avec un message pertinent 
qui résume bien les modifications apportées  

- **Il ne faut commiter sur la base du temps passé mais plutôt sur la base des fonctionnalités.**
