# Les bases de Git {.backgroundTitre}

## Comment utiliser Git ?

3 façons seront présentées dans ce support :

- Via l'interface visuelle de l'IDE RStudio  
    *Pour les commandes les plus courantes du quotidien*

- Via les commandes du terminal
    *Pour les commandes plus avancées*
    
- Via le package R `gitssp`
    *Pour simplifier l'articulation avec les dépôts distants*
    
## Git - un modèle distribué

- Dépôt local : dépôt de l'agent sur son espace de travail (sous Cerise ou en local par ex.)
- Dépôt distant (remote) : dépôt correspondant situé sur la forge.

::: callout-
## Convention 

Par défaut, le dépôt distant porte l'alias `origin`
:::


![](img/git_distributed.png)

## Fonctionnement

Pour évoquer le fonctionnement de Git et son articulation avec une forge, cela 
nécessite d'apprendre à utiliser de nouveau termes (voir lexique diapo suivante).

> 



![](img/completeworkflow.png)
*Source : [itnext.io](https://itnext.io/git-concepts-for-newcomers-part-2-git-repository-working-tree-and-staging-area-a2e720bf3528)

## Lexique de survie

- `working directory` : répertoire de travail de l'agent
- `staging area` : zone tampon dans laquelle l'agent regroupe les changements en vue du prochain commit.
- `local repository` : dépôt local présent dans votre espace de travail (.git)
- `remote repository` : dépôt distant sur une forge

- `git add` : ajout des changements à l'index
- `git commit` : enregistre les changements placés dans l'index
- `git push` : envoie les changements vers le dépôt distant
- `git pull` : télécharge les changements depuis le dépôt distant
- `git checkout` : permet de se déplacer dans l'arbre (retour vers le passé, changement de branche)


## Une 2ème illustration pour fixer les idées :)

![](img/git-workflow-allisonhorst.png)
*Source :  [Allison Horst](https://allisonhorst.com/git-github)

## toto

![](img/git-workflow-allisonhorst.png)

## Le versioning

![](img/schema_vaches_branches_git.png)

